//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3521
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Maverick.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Maverick.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot convert metadata value &apos;{0}&apos; to type &apos;{1}&apos;.
        /// </summary>
        internal static string Error_CannotConvertMetadataValue {
            get {
                return ResourceManager.GetString("Error_CannotConvertMetadataValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Part does not contain an export for contract: &apos;{0}&apos;.
        /// </summary>
        internal static string Error_PartDoesNotContainAnExportForContract {
            get {
                return ResourceManager.GetString("Error_PartDoesNotContainAnExportForContract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Part does not contain any imports.
        /// </summary>
        internal static string Error_PartDoesNotContainAnyImports {
            get {
                return ResourceManager.GetString("Error_PartDoesNotContainAnyImports", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The required metadata key &apos;{0}&apos; was not found on the component.  Ensure you have applied the proper attribute to the component class.  All Maverick component types have an attribute type which is used to attach required metadata to implementations of that component type.  For example, DataContextFactory components must have a DataContextFactoryAttribute applied..
        /// </summary>
        internal static string Error_RequiredMetadataKeyMissing {
            get {
                return ResourceManager.GetString("Error_RequiredMetadataKeyMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There were errors validating the {0}.
        /// </summary>
        internal static string Error_ValidationFailed {
            get {
                return ResourceManager.GetString("Error_ValidationFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to :
        ///{0}.
        /// </summary>
        internal static string Error_ValidationFailedRuleMessagesList {
            get {
                return ResourceManager.GetString("Error_ValidationFailedRuleMessagesList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to * {0}.
        /// </summary>
        internal static string Error_ValidationFailedRuleMesssage {
            get {
                return ResourceManager.GetString("Error_ValidationFailedRuleMesssage", resourceCulture);
            }
        }
    }
}
