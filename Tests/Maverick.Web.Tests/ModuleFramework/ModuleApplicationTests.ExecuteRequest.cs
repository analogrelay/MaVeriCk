// --------------------------------------------------------------------------------------------------------------------- 
// <copyright file="ModuleApplicationTests.ExecuteRequest.cs" company="Andrew Nurse">
//   Copyright (c) 2009 Andrew Nurse.  Licensed under the Ms-PL license: http://opensource.org/licenses/ms-pl.html
// </copyright>
// <summary>
//   Defines the ModuleApplicationTests type.
// </summary>
// ---------------------------------------------------------------------------------------------------------------------

using System;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using Maverick.Models;
using Maverick.Web.ModuleFramework;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using TestUtilities;
using TargetResources = Maverick.Web.Properties.Resources;

namespace Maverick.Web.Tests.ModuleFramework {
    [TestClass]
    public partial class ModuleApplicationTests {
        [TestMethod]
        public void ExecuteRequest_Calls_GetRouteData_With_ModuleRoute_To_Route_Request() {
            // Arrange
            ModuleApplication app = CreateTestApplication();

            HttpContextBase actualContext = null;
            Mock.Get(app)
                .Setup(a => a.GetRouteData(It.IsAny<HttpContextBase>()))
                .Callback<HttpContextBase>(providedContext => actualContext = providedContext)
                .Returns(CreateTestRouteData());

            app.ControllerFactory = SetupControllerFactory(new Mock<Controller>().Object);

            ModuleRequestContext moduleRequestContext = CreateModuleContext(app, "Foo/Bar/Baz");
            
            // Act
            app.ExecuteRequest(moduleRequestContext);

            // Assert
            Mock.Get(app)
                .Verify(a => a.GetRouteData(It.IsAny<HttpContextBase>()));

            Assert.AreEqual("~/Foo/Bar/Baz", actualContext.Request.AppRelativeCurrentExecutionFilePath,
                            "Expected that the HttpRequest would be rewritten to use the module routing url provided");
        }

        [TestMethod]
        public void ExecuteRequest_Calls_ControllerFactory_To_Construct_Controller() {
            // Arrange
            ModuleApplication app = CreateTestApplication();

            RouteData expectedRouteData = SetupGetRouteDataCall(app);

            var mockControllerFactory = new Mock<IControllerFactory>();
            RequestContext actualRequestContext = null;
            mockControllerFactory.Setup(f => f.CreateController(It.IsAny<RequestContext>(), "Foo"))
                                 .Callback<RequestContext, string>((c, n) => actualRequestContext = c)
                                 .Returns(new Mock<Controller>().Object);

            app.ControllerFactory = mockControllerFactory.Object;
            
            ModuleRequestContext moduleRequestContext = CreateModuleContext(app, "Foo/Bar/Baz");
            
            // Act
            app.ExecuteRequest(moduleRequestContext);

            // Assert
            mockControllerFactory.Verify(f => f.CreateController(It.IsAny<RequestContext>(), "Foo"));
            Assert.AreSame(expectedRouteData, actualRequestContext.RouteData, "Expected that the request context would contain the route data generated by GetRouteData");
            Assert.AreSame(moduleRequestContext.HttpContext, actualRequestContext.HttpContext, "Expected that the request context would contain the HttpContext provided to ExecuteRequest");
        }

        [TestMethod]
        public void ExecuteRequest_Throws_InvalidOperationException_If_Controller_Only_Implements_IController() {
            // Arrange
            ModuleApplication app = CreateTestApplication();

            RouteData expectedRouteData = SetupGetRouteDataCall(app);

            var mockController = new Mock<IController>();
            app.ControllerFactory = SetupControllerFactory(mockController.Object);

            ModuleRequestContext moduleRequestContext = CreateModuleContext(app, "Foo/Bar/Baz");

            // Act and Assert
            ExceptionAssert.Throws<InvalidOperationException>(() => app.ExecuteRequest(moduleRequestContext), TargetResources.Error_CouldNotConstructController);
        }

        [TestMethod]
        public void ExecuteRequest_Throws_InvalidOperationException_If_Controller_Has_Nonstandard_Action_Invoker() {
            // Arrange
            ModuleApplication app = CreateTestApplication();

            RouteData expectedRouteData = SetupGetRouteDataCall(app);

            var mockController = new Mock<Controller>();
            var mockInvoker = new Mock<IActionInvoker>();
            mockController.Object.ActionInvoker = mockInvoker.Object;

            app.ControllerFactory = SetupControllerFactory(mockController.Object);

            ModuleRequestContext moduleRequestContext = CreateModuleContext(app, "Foo/Bar/Baz");

            // Act and Assert
            ExceptionAssert.Throws<InvalidOperationException>(() => app.ExecuteRequest(moduleRequestContext), TargetResources.Error_CouldNotConstructController);
        }

        [TestMethod]
        public void ExecuteRequest_Does_Not_Throw_If_Controller_Implements_IModuleController() {
            // Arrange
            ModuleApplication app = CreateTestApplication();

            RouteData expectedRouteData = SetupGetRouteDataCall(app);

            var mockController = new Mock<IController>();
            mockController.As<IModuleController>();
            app.ControllerFactory = SetupControllerFactory(mockController.Object);

            ModuleRequestContext moduleRequestContext = CreateModuleContext(app, "Foo/Bar/Baz");

            // Act and Assert
            app.ExecuteRequest(moduleRequestContext);
        }

        [TestMethod]
        public void ExecuteRequest_Does_Not_Throw_If_Controller_Inherits_From_Controller() {
            // Arrange
            ModuleApplication app = CreateTestApplication();

            RouteData expectedRouteData = SetupGetRouteDataCall(app);

            var mockController = new Mock<Controller>();
            app.ControllerFactory = SetupControllerFactory(mockController.Object);

            ModuleRequestContext moduleRequestContext = CreateModuleContext(app, "Foo/Bar/Baz");

            // Act and Assert
            app.ExecuteRequest(moduleRequestContext);
        }

        [TestMethod]
        public void ExecuteRequest_Returns_Result_And_ControllerContext_From_Controller() {
            // Arrange
            ModuleApplication app = CreateTestApplication();

            SetupGetRouteDataCall(app);

            ControllerContext controllerContext = Mockery.CreateMockControllerContext();
            ActionResult actionResult = new Mock<ActionResult>().Object;

            IModuleController controller = SetupMockController(actionResult, controllerContext);
            app.ControllerFactory = SetupControllerFactory(controller);

            ModuleRequestContext moduleRequestContext = CreateModuleContext(app, "Foo/Bar/Baz");

            // Act
            ModuleRequestResult result = app.ExecuteRequest(moduleRequestContext);

            // Assert
            Assert.AreSame(actionResult, result.ActionResult, "Expected that the result of the action would be returned by the application");
            Assert.AreSame(controllerContext, result.ControllerContext, "Expected that the controller context of the controller would be returned by the application");
        }

        [TestMethod]
        public void ExecuteRequest_Wraps_Request_In_PageOverrideResult_If_ShouldOverrideOtherModules_Returns_True() {
            // Arrange
            ModuleApplication app = CreateTestApplication();

            RouteData expectedRouteData = SetupGetRouteDataCall(app);

            ControllerContext controllerContext = Mockery.CreateMockControllerContext();
            ActionResult actionResult = new Mock<ActionResult>().Object;

            IModuleController controller = SetupMockController(actionResult, controllerContext);
            app.ControllerFactory = SetupControllerFactory(controller);

            Mock.Get(app)
                .Setup(a => a.ShouldOverrideOtherModules(actionResult, It.IsAny<ModuleRequestContext>(), It.IsAny<ControllerContext>()))
                .Returns(true);

            ModuleRequestContext moduleRequestContext = CreateModuleContext(app, "Foo/Bar/Baz");

            // Act
            ModuleRequestResult result = app.ExecuteRequest(moduleRequestContext);

            // Assert
            Assert.IsInstanceOfType(result.ActionResult, typeof(PageOverrideResult));
            Assert.AreSame(actionResult, ((PageOverrideResult)result.ActionResult).InnerResult);
        }

        [TestMethod]
        public void ExecuteRequest_Executes_Constructed_Controller_And_Provides_RequestContext() {
            // Arrange
            ModuleApplication app = CreateTestApplication();

            IModuleController controller = SetupExecuteRequestCall(app);

            ModuleRequestContext moduleRequestContext = CreateModuleContext(app, "Foo/Bar/Baz");

            // Act
            ModuleRequestResult result = app.ExecuteRequest(moduleRequestContext);

            // Assert
            Mock.Get(controller)
                .Verify(c => c.Execute(It.Is<RequestContext>(rc =>
                    rc.HttpContext == moduleRequestContext.HttpContext &&
                    rc.RouteData.GetRequiredString("controller") == "Foo"))
                );
        }

        [TestMethod]
        public void ExecuteRequest_ReleasesController_After_Executing() {
            // Arrange
            ModuleApplication app = CreateTestApplication();

            IModuleController controller = SetupExecuteRequestCall(app);

            ModuleRequestContext moduleRequestContext = CreateModuleContext(app, "Foo/Bar/Baz");

            // Act
            ModuleRequestResult result = app.ExecuteRequest(moduleRequestContext);

            // Assert
            Mock.Get(app.ControllerFactory)
                .Verify(f => f.ReleaseController(controller));
        }

        [TestMethod]
        public void ExecuteRequest_ReleasesController_Even_If_It_Throws_An_Exception() {
            // Arrange
            ModuleApplication app = CreateTestApplication();

            IModuleController controller = SetupExecuteRequestCall(app);
            Mock.Get(controller)
                .Setup(c => c.Execute(It.IsAny<RequestContext>()))
                .Throws(new Exception("Uh Oh!"));

            ModuleRequestContext moduleRequestContext = CreateModuleContext(app, "Foo/Bar/Baz");

            // Act (and verify the exception is thrown; also supresses the exception so it doesn't fail the test)
            ExceptionAssert.Throws<Exception>(() => app.ExecuteRequest(moduleRequestContext), "Uh Oh!");

            // Assert
            Mock.Get(app.ControllerFactory)
                .Verify(f => f.ReleaseController(controller));
        }

        private IModuleController SetupExecuteRequestCall(ModuleApplication app) {
            RouteData expectedRouteData = SetupGetRouteDataCall(app);

            ControllerContext controllerContext = Mockery.CreateMockControllerContext();
            ActionResult actionResult = new Mock<ActionResult>().Object;

            IModuleController controller = SetupMockController(actionResult, controllerContext);
            app.ControllerFactory = SetupControllerFactory(controller);

            Mock.Get(app)
                .Setup(a => a.ShouldOverrideOtherModules(actionResult, It.IsAny<ModuleRequestContext>(), It.IsAny<ControllerContext>()))
                .Returns(true);

            return controller;
        }

        private IModuleController SetupMockController(ActionResult actionResult, ControllerContext controllerContext) {
            var mockController = new Mock<IModuleController>();
            mockController.Setup(c => c.ResultOfLastExecute)
                .Returns(actionResult);
            mockController.Setup(c => c.ControllerContext)
                .Returns(controllerContext);
            return mockController.Object;
        }

        private IControllerFactory SetupControllerFactory(IController controller) {
            var mockControllerFactory = new Mock<IControllerFactory>();
            mockControllerFactory.Setup(f => f.CreateController(It.IsAny<RequestContext>(), It.IsAny<string>()))
                .Returns(controller);
            return mockControllerFactory.Object;
        }

        private RouteData SetupGetRouteDataCall(ModuleApplication app) {
            RouteData expectedRouteData = CreateTestRouteData();

            Mock.Get(app)
                .Setup(a => a.GetRouteData(It.IsAny<HttpContextBase>()))
                .Returns(expectedRouteData);
            return expectedRouteData;
        }

        private RouteData CreateTestRouteData() {
            RouteData expectedRouteData = new RouteData();
            expectedRouteData.Values["controller"] = "Foo";
            return expectedRouteData;
        }

        private ModuleRequestContext CreateModuleContext(ModuleApplication app, string moduleRoutingUrl) {
            return new ModuleRequestContext {
                Application = app,
                HttpContext = Mockery.CreateMockHttpContext("http://localhost/Portal/Page/ModuleRoute"),
                Module = new Module {Id = 42},
                ModuleRoutingUrl = moduleRoutingUrl
            };
        }

        private ModuleApplication CreateTestApplication() {
            return new Mock<ModuleApplication> {CallBase = true}.Object;
        }
    }
}
